# REF/OUT = reference/output parameters

algoWrapper(recipes, kitchen, num users) 
    returns list of successful schedules, with times measured from start
{
  starting steps = all recipes' final steps in a single list
  resources = construct using kitchen and num users
  schedule builder = construct new schedule builder using starting steps and 
                     resources
  successful schedules = construct empty list of schedules
  algo(schedule builder, REF successful schedules)

  pick best successful schedule (how???)
  return best schedule
}

algo(schedule builder, REF successful schedules)
{
  for each step in schedule builder's possible steps
  {
    schedule builder copy = deep copy of schedule builder
    if can add step to schedule builder copy
    {
      // recursive case - add step
      add step to new schedule builder
      algo(schedule builder copy, REF successful schedules)
    }
  }

  schedule builder copy = deep copy of schedule builder
  if can advance schedule builder copy's sweep line
  {
    // recursive case - advance sweep line
    advance new schedule builder's sweep line

    algo(schedule builder, REF successfulSchedules)
  }
  else if possible steps is empty
  {
    // base case - success
    successful schedule = get schedule from schedule builder
    add successful schedule to successful schedules
    (return - noop)
  }
  else
  {
    // base case - failure
    (return - noop)
  }
}

